class SpotifyPlaylistsController < ApplicationController
  before_action :require_login
  before_action :ensure_spotify!, only: [:create_for_me, :create_for_tag]

  # 1) 自分の投稿から「マイMeloLogプレイリスト」を作成
  def create_for_me
    owner = User.find_by(id: params[:user_id]) || current_user
    current_user.refresh_spotify_token! if current_user.spotify_token_expired?
    # 例: 15曲以上なければ弾く（任意）
    cnt = owner.posts.where.not(song_id: nil).count
    if cnt < required_songs
      redirect_back fallback_location: root_path,
                    alert: "プレイリスト作成にはあと#{required_songs - cnt}曲必要です"
      return
    end

    songs = owner.posts.where.not(song_id: nil)
                  .includes(:song).order(created_at: :desc)
                  .map(&:song)
    uris  = songs.map { |s| spotify_uri_for(s) }.compact.uniq
    if uris.empty?
      redirect_back fallback_location: root_path, alert: "曲が見つかりません" and return
    end

    title = "#{owner.nickname}のMeloLogプレイリスト #{Time.current.strftime('%Y-%m-%d')}"
    url = Spotify::CreatePlaylist.new(access_token: current_user.spotify_access_token, public: true)
            .call(title: title, description: "Generated by MeloLog", uris: uris)

    redirect_to url, allow_other_host: true, notice: "Spotifyにプレイリストを作成しました"
  end

  # 2) タグに紐づく曲から作成
  def create_for_tag
    current_user.refresh_spotify_token! if current_user.spotify_token_expired?
    
    tag = Tag.find(params[:id])
    posts_scope = tag.posts.where.not(song_id: nil).includes(:song).order(created_at: :desc)

    cnt = posts_scope.count
    if cnt < required_songs
      redirect_back fallback_location: tag_path(tag), alert: "プレイリスト作成にはあと#{required_songs - cnt}曲必要です"
      return
    end

    uris  = posts_scope.map { |p| spotify_uri_for(p.song) }.compact.uniq
    if uris.empty?
      redirect_back fallback_location: tag_path(tag), alert: "このタグの曲がありません" 
      return
    end

    title = "MeloLog: #{tag.name}"
    url = Spotify::CreatePlaylist.new(access_token: current_user.spotify_access_token, public: true)
            .call(title: title, description: "Tag: #{tag.name}", uris: uris)

    redirect_to url, allow_other_host: true, notice: "Spotifyにプレイリストを作成しました"
  end

  private

  # トークンが無ければ認可へ誘導（戻り先を保存）
  def ensure_spotify!
    if current_user.spotify_access_token.blank? || current_user.spotify_token_expired?
      referer_path = (URI(request.referer || "").path rescue nil)
      session[:return_to] = referer_path.presence || root_path
      
      redirect_to auth_spotify_start_path(return_to: session[:return_to]), status: :see_other
    end
  end

  # SongからSpotify URIを作る（カラム名はプロジェクトに合わせて）
  def spotify_uri_for(song)
    if song.respond_to?(:spotify_uri) && song.spotify_uri.present?
      song.spotify_uri                                   # 例: "spotify:track:xxxx"
    elsif song.respond_to?(:spotify_id) && song.spotify_id.present?
      "spotify:track:#{song.spotify_id}"
    else
      nil
    end
  end
end
